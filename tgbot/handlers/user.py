import asyncio
import json
import random
import re
from datetime import datetime

import aiohttp
import requests as requests
from aiogram import Dispatcher
from aiogram import types
from aiogram.dispatcher import FSMContext
from googletrans import Translator

from tgbot.keyboards.reply import kbd, kbd2
from tgbot.misc.parser import parse_jokes
from tgbot.misc.states import MyForm

scores_good = {}
scores_bad = {}
scores_neu = {}


async def start1233(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç Romn! –ó–∞—Ä–∞–∑ —è –≥–æ—Ç–æ–≤ —Ä–æ–∑–≤–∞–∂–∏—Ç–∏ —Ç–µ–±–µ –∞–Ω–µ–∫–¥–æ—Ç–∞–º–∏, –ø–æ–∫–∞–∑–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ, –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, –ø–µ—Ä–µ–∫–ª–∞–¥–∞—Ç–∏ —Å–ª–æ–≤–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é —Ç–∞ –Ω–∞–≤—ñ—Ç—å –≥—Ä–∞—Ç–∏ –≤ –∫—É–±–∏–∫. –ü—Ä–æ—Å—Ç–æ –≤–∏–±–µ—Ä–∏ —Ç–µ —â–æ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –∞–±–æ –≤–∏–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥–∏ –Ω–∏–∂—á–µ: \n/anek - —Ä–∞–Ω–¥–æ–º–Ω–∏–π –∞–Ω–µ–∫–¥–æ—Ç \n/vtratu - –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –≤—Ç—Ä–∞—Ç–∏ —Ä–æ—Å—ñ—è–Ω –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ \n/setrem - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ –¥–µ–Ω—å-–º—ñ—Å—è—Ü—å-—Ä—ñ–∫ –≥–æ–¥–∏–Ω–∏:—Ö–≤–∏–ª–∏–Ω–∏ \nüé≤ - –∑—ñ–≥—Ä–∞—Ç–∏ –∑ –±–æ—Ç–æ–º —É –∫—É–±–∏–∫. –í–∏–≥—Ä–∞—î —Ç–æ–π —É –∫–æ–≥–æ —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ –Ω—ñ–∂ —É —Å—É–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ \n/trans - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–∞",
        reply_markup=kbd)
    await message.answer(
        "–í–∏–±–∞—á —è–∫—â–æ —è –ø—ñ–¥–ª–∞–≥—É—é –∞–±–æ –≤–∏–¥–∞—é —Ç–æ–±—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏! –Ø —Å—Ç–∞—Ä–∞—é—Å—è –Ω–∞ —Å–≤—ñ–π –º–∞–∫—Å–∏–º—É–º –Ω–∞ —è–∫–∏–π –º–µ–Ω–µ –∑–∞–ø—Ä–∞")

    user_id = message.from_user.id
    scores_good[user_id] = 0
    scores_bad[user_id] = 0
    scores_neu[user_id] = 0


############################################################################################################################

############################################################################################################################

async def send_joke(message: types.Message):
    jokes = await (parse_jokes())
    jokes_max = len(jokes)
    if jokes:
        joke = random.randint(0, jokes_max)
        text_only = re.sub(r'<h4>(.*?)</h4>', '', jokes[joke])
        await message.answer(text_only)
    else:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç–∏")


############################################################################################################################


############################################################################################################################

async def vtra(message: types.Message):
    url = "https://russianwarship.rip/api/v2/statistics/latest"  # –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–∞–π—Ç–∞
    response = requests.get(url)
    data = response.json()
    await message.reply(
        f"–ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –¥–µ–Ω—å({data['data']['date']}) –≤—Ç—Ä–∞—Ç–∏ –≤–æ—Ä–æ–≥–∞ —Ç–∞–∫—ñ:\n–ì–∞—Ä–Ω–∏—Ö —Ä—É—Å—å–∫—ñ—Ö = {data['data']['stats']['personnel_units']}\n–¢–∞–Ω–∫—ñ–≤ = {data['data']['stats']['tanks']}\n–ê—Ä—Ç–∏–ª–µ—Ä—ñ—è = {data['data']['stats']['artillery_systems']}\n–ú–õ–†–° = {data['data']['stats']['mlrs']}\n–õ—ñ—Ç–∞—á–∫—ñ–≤ = {data['data']['stats']['planes']}")
    # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ—Ä–æ–±–∏—Ç–∏ —â–æ–± –ø–æ–∫–∞–∑—É–≤–∞–ª–æ –ø—Ä—è–º –≤—Å–µ-–≤—Å–µ
    await asyncio.sleep(2)


############################################################################################################################

############################################################################################################################


async def start_rem(message: types.Message):
    await message.reply(
        "–í—Å—Ç–∞–Ω–æ–≤–ª—é–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–≤—ñ–º–∫–Ω–µ–Ω–æ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –¥–∞—Ç—É —É –≤–∏–≥–ª—è–¥—ñ –î–î.–ú–ú.–†–† –ì–ì:–•–• . –ó–∞–ª–∏—à–∏—Ç–∏ –º–æ–∂–Ω–∞ –∫–æ–ª–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏—à /stop",
        reply_markup=kbd2)
    await MyForm.reminder_datetime.set()

async def stop_rem(message: types.Message, state:FSMContext):
    await message.reply("–í—Å—Ç–∞–Ω–æ–≤–ª—é–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –≤–∏–º–∫–Ω–µ–Ω–æ.", reply_markup=kbd)
    await state.finish()

async def process_reminder_datetime(message: types.Message, state: FSMContext):
    reminder_datetime = message.text
    try:
        reminder_date, reminder_time = reminder_datetime.split(' ')
        datetime.strptime(reminder_date, '%d.%m.%Y')
        datetime.strptime(reminder_time, '%H:%M')
    except ValueError:
        await message.reply('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ –∞–±–æ —á–∞—Å—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† –ì–ì:–•–•')
        return
    await message.reply('–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –Ø –Ω–∞–≥–∞–¥–∞—é –≤–∞–º —É –≤–∫–∞–∑–∞–Ω–∏–π —á–∞—Å.')
    await asyncio.sleep(get_seconds_until_reminder(reminder_datetime))
    await message.answer(f'–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è! –ó–∞—Ä–∞–∑ {reminder_datetime}.')


def get_seconds_until_reminder(reminder_datetime):
    reminder_date, reminder_time = reminder_datetime.split(' ')
    reminder_datetime = datetime.strptime(reminder_date + ' ' + reminder_time, '%d.%m.%Y %H:%M')
    current_datetime = datetime.now()
    seconds_until_reminder = (reminder_datetime - current_datetime).total_seconds()
    return seconds_until_reminder


# –î–∞
############################################################################################################################

############################################################################################################################
# –ì—Ä–∞ –∫—É–±–∏–∫, –≤—Å–µ —Ä–æ–∑–±–∏—Ä–∞–ª–∏

async def roll_dice(message: types.Message):

    user_id = message.from_user.id
    if user_id not in scores_good:
        scores_good[user_id] = 0
        scores_bad[user_id] = 0
        scores_neu[user_id] = 0

    await asyncio.sleep(4)
    user_id = message.from_user.id
    answer = await message.answer_dice("üé≤")
    await asyncio.sleep(4)
    pl_score = message.dice.value
    bot_score = answer.dice.value
    if pl_score < bot_score:
        dice_bad = 1
        await message.answer("–¢–∏ –ø—Ä–æ–≥—Ä–∞–≤")
        scores_bad[user_id] += dice_bad
        await message.answer(
            f"–¢–∏ –ø–µ—Ä–µ–º—ñ–≥ –±–æ—Ç–∞ –≤–∂–µ {scores_good[user_id]} —Ä–∞–∑—ñ–≤ \n–ü—Ä–æ–≥—Ä–∞–≤ –±–æ—Ç—É {scores_bad[user_id]} —Ä–∞–∑—ñ–≤ \n–ù—ñ—á–∏—è –±—É–ª–∞ {scores_neu[user_id]} —Ä–∞–∑—ñ–≤")
    elif pl_score > bot_score:
        dice_good = 1
        await message.answer("–¢–∏ –≤–∏–≥—Ä–∞–≤")
        scores_good[user_id] += dice_good
        await message.answer(
            f"–¢–∏ –ø–µ—Ä–µ–º—ñ–≥ –±–æ—Ç–∞ –≤–∂–µ {scores_good[user_id]} —Ä–∞–∑—ñ–≤ \n–ü—Ä–æ–≥—Ä–∞–≤ –±–æ—Ç—É {scores_bad[user_id]} —Ä–∞–∑—ñ–≤ \n–ù—ñ—á–∏—è –±—É–ª–∞ {scores_neu[user_id]} —Ä–∞–∑—ñ–≤")
    else:
        dice_neu = 1
        await message.answer("–ù—ñ—á–∏—è")
        scores_neu[user_id] += dice_neu
        await message.answer(
            f"–¢–∏ –ø–µ—Ä–µ–º—ñ–≥ –±–æ—Ç–∞ –≤–∂–µ {scores_good[user_id]} —Ä–∞–∑—ñ–≤ \n–ü—Ä–æ–≥—Ä–∞–≤ –±–æ—Ç—É {scores_bad[user_id]} —Ä–∞–∑—ñ–≤ \n–ù—ñ—á–∏—è –±—É–ª–∞ {scores_neu[user_id]} —Ä–∞–∑—ñ–≤")


############################################################################################################################

############################################################################################################################
# –í–∞–ª—é—Ç–∞, –º–æ–∂–Ω–∞ —â–µ –¥–æ–±–∞–≤–∏—Ç–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
async def valuta(message: types.Message):
    async with aiohttp.ClientSession() as session:
        async with session.get('https://api.privatbank.ua/p24api/pubinfo?exchange&coursid=5') as response:
            rates = await response.json()
    date = datetime.now().strftime('%d.%m.%Y %H:%M')
    for rate in rates:
        await message.answer(
            f"–°—å–æ–≥–æ–¥–Ω—ñ {date} –∫—É—Ä—Å {rate.get('ccy')} / {rate.get('base_ccy')} —Å—Ç–∞–Ω–æ–≤–∏—Ç—å: \n–ü—Ä–æ–¥–∞—Ç–∏ - {rate.get('buy')}\n–ö—É–ø–∏—Ç–∏ - {rate.get('sale')} ")


############################################################################################################################

############################################################################################################################
translator = Translator()



async def start_translation(message: types.Message):
    await message.reply("–ü–µ—Ä–µ–∫–ª–∞–¥ —É–≤—ñ–º–∫–Ω–µ–Ω–æ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Å–ª–æ–≤–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É. –ó–∞–ª–∏—à–∏—Ç–∏ –º–æ–∂–Ω–∞ –∫–æ–ª–∏ –Ω–∞–ø–∏—à–µ—à /stop",
                        reply_markup=kbd2)
    await MyForm.translator.set()


async def stop_translation(message: types.Message, state:FSMContext):
    await message.reply("–ü–µ—Ä–µ–∫–ª–∞–¥ –≤–∏–º–∫–Ω–µ–Ω–æ.", reply_markup=kbd)
    await state.finish()

async def translate_words(message: types.Message):
    translation = translator.translate(message.text, dest="en")
    await message.reply(f"–ü–µ—Ä–µ–∫–ª–∞–¥:\n{translation.text}")


############################################################################################################################

def register_user(dp: Dispatcher):
    dp.register_message_handler(start1233, commands=['start', "—Å—Ç–∞—Ä—Ç", "help"])
    dp.register_message_handler(send_joke, commands=['anek', "–∞–Ω–µ–∫–¥–æ—Ç"])
    dp.register_message_handler(vtra, commands=["vtratu", "–≤—Ç—Ä–∞—Ç–∏"])
    dp.register_message_handler(start_rem, commands=['setrem', "–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"])
    dp.register_message_handler(stop_rem, commands=['stop'], state=MyForm.reminder_datetime)
    dp.register_message_handler(process_reminder_datetime, state=MyForm.reminder_datetime)
    dp.register_message_handler(roll_dice, content_types=types.ContentTypes.DICE)
    dp.register_message_handler(valuta, commands=['valuta', "–≤–∞–ª—é—Ç–∞"])
    dp.register_message_handler(start_translation, commands=['trans', "–ø–µ—Ä–µ–∫–ª–∞–¥–∞—á"])
    dp.register_message_handler(stop_translation, commands=['stop'], state=MyForm.translator)
    dp.register_message_handler(translate_words, state=MyForm.translator)
